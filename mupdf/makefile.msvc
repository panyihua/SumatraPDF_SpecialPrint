# nmake -f makefile.msvc
# Arguments:
# CFG=dbg|rel (default: dbg)
# EXTDIR=<directory where zlib/freetype/jpeg lib live> (default: ..\ext)
#  e.g. ..\sumatrapdf\ext
# NASM=<path to nasm.exe> (default: nasm.exe)
# PLATFORM=X86
#  the PLATFORM var is usually set in the x64 and x64 cross tools Visual Studio command prompt
#  note: building on X64 isn't officially supported and might unintentionally be broken

# Set default configuration
!if "$(CFG)"==""
CFG=dbg
!endif
!if "$(PLATFORM)"==""
PLATFORM=X86
!endif

# O is directory where object and binary files go
!if "$(O)"==""
O = obj-$(CFG)-win
!if "$(PLATFORM)"=="X64"
O = $(O)64
!endif
!endif

OZ  = $(O)\zlib
OFT = $(O)\freetype
OT  = $(O)\jpegturbo
OOJ = $(O)\openjpeg
OJB = $(O)\jbig2
OFZ = $(O)\fitz
OP  = $(O)\mupdf
OX  = $(O)\muxps
OA  = $(O)\muapps

# To over-ride location of fitz/mupdf sources, define MUPDF_DIR
# e.g.:
#MUPDF_DIR=..\mupdf

!if "$(MUPDF_DIR)"==""
MUPDF_DIR=.
!endif

!if "$(EXTDIR)"==""
EXTDIR=..\ext
!endif

ZLIB_DIR=$(EXTDIR)\zlib
FREETYPE_DIR=$(EXTDIR)\freetype2
JPEG_TURBO_DIR=$(EXTDIR)\libjpeg-turbo
OPENJPEG_DIR=$(EXTDIR)\openjpeg
JBIG2_DIR=$(EXTDIR)\jbig2dec
MUPDF_GEN_DIR = $(MUPDF_DIR)\generated

# full path to NASM can be passed in or we'll assume it's in PATH
!if "$(NASM)"==""
NASM=nasm.exe
!endif

CC = cl.exe
LD = link.exe

# CFLAGSB - CFLAGS base (use CFLAGS or CFLAGSOPT later on)

CFLAGSB = $(CFLAGSB) /nologo /c
# standard windows defines
!if "$(PLATFORM)"=="X64"
CFLAGSB = $(CFLAGSB) /D "WIN64" /D "_WIN64"
!endif
# WIN32 means any Windows, not just 32-bit Windows
CFLAGSB = $(CFLAGSB) /D "WIN32" /D "_WIN32"

# /WX  : treat warnings as errors
# /GR- : disable RTTI
# /Zi  : enable debug information
# /GS  : enable security checks
# /Gy  : separate functions for linker
# /GF  : enable read-only string pooling
# /MP  : use muliple processors to speed up compilation
CFLAGSB = $(CFLAGSB) /WX /GR- /Zi /GS /Gy /GF /MP

# on 64-bit SSE2 is always used, so no need to specify it
#!if "$(PLATFORM)"!="X64" && "$(WITHOUT_ARCH_SSE2)"==""
#CFLAGSB = $(CFLAGSB) /arch:SSE2
#!endif

# /EHs-c- : disable C++ exceptions (generates smaller binaries)
CFLAGSB = $(CFLAGSB) /EHs-c-

# /W4  : bump warnings level from 1 to 4
CFLAGSB = $(CFLAGSB) /W4
# warnings unlikely to be turned off due to false positives from using CrashIf()
# and various logging functions:
# 4100 : unreferenced param
# 4127 : conditional expression is constant
# 4189 : variable initialized but not referenced
CFLAGSB = $(CFLAGSB) /wd4100 /wd4127 /wd4189
# warnings that might not make sense to fix:
# 4428 : universal-character-name encountered in source (prevents using "\u202A" etc.)
CFLAGSB = $(CFLAGSB) /wd4428

# /Ox  : maximum optimizations
# /O2  : maximize speed
# docs say /Ox better, my tests say /O2 better
CFLAGSOPT = $(CFLAGSB) /O2 /D "NDEBUG"

LDFLAGS = $(LDFLAGS) /nologo /DEBUG /RELEASE /opt:ref /opt:icf /MACHINE:$(PLATFORM)

!if "$(CFG)"!="dbg"
# /GL  : enable link-time code generation
CFLAGS  = $(CFLAGSOPT) /GL
LDFLAGS = $(LDFLAGS) /LTCG
# /DYNAMICBASE and /NXCOMPAT for better protection against stack overflows
# http://blogs.msdn.com/vcblog/archive/2009/05/21/dynamicbase-and-nxcompat.aspx
# We don't use /NXCOMPAT because we need to turn it on/off at runtime
LDFLAGS = $(LDFLAGS) /DYNAMICBASE /FIXED:NO
!else
# /MTd  : statically link debug crt (libcmtd.lib)
CFLAGSB = $(CFLAGSB) /MTd
# /RTCs : stack frame runtime checking
# /RTCu : ununitialized local usage checks
# /Od   : disable optimizations
CFLAGS = $(CFLAGSB) /Od /RTCs /RTCu
!endif

ZLIB_CFLAGS = $(CFLAGSOPT) /TC /wd4131 /wd4244 /wd4996 /I$(ZLIB_DIR) /I$(ZLIB_DIR)/infback9

# 4703 - potentially uninitialized local variable (frequent with vs 2012)
FREETYPE_CFLAGS = $(CFLAGSOPT) /TC /I$(FREETYPE_DIR)/config /I$(FREETYPE_DIR)/include \
	/D "FT2_BUILD_LIBRARY" /D "FT_OPTION_AUTOFIT2" /wd4703 /wd4996

JBIG2_CFLAGS = $(CFLAGS) /TC /D "HAVE_STRING_H=1" /D "JBIG_NO_MEMENTO" /I$(JBIG2_DIR)
JBIG2_CFLAGS = $(JBIG2_CFLAGS) /wd4018 /wd4244 /wd4701 /wd4996

OPENJPEG_CFLAGS = $(CFLAGS) /TC /I$(OPENJPEG_DIR) /wd4244 /wd4996

JPEG_TURBO_CFLAGS = $(CFLAGS) /TC /I$(JPEG_TURBO_DIR) /I$(JPEG_TURBO_DIR)\simd
JPEG_TURBO_CFLAGS = $(JPEG_TURBO_CFLAGS) /wd4018 /wd4101 /wd4244 /wd4245 /wd4996
!if "$(PLATFORM)"=="X64"
JPEG_TURBO_NASM_FLAGS = -I $(JPEG_TURBO_DIR)\simd\ -I $(JPEG_TURBO_DIR)\win\ -f win64 -D__x86_64__ -DWIN64 -DMSVC
!else
JPEG_TURBO_NASM_FLAGS = -I $(JPEG_TURBO_DIR)\simd\ -I $(JPEG_TURBO_DIR)\win\ -f win32
!endif

# 4703 - potentially uninitialized local variable (frequent with vs 2012)
MUPDF_CFLAGS = $(CFLAGS) /TC /I$(MUPDF_DIR)/include /I$(MUPDF_DIR)/generated \
	/I$(FREETYPE_DIR)/config /I$(FREETYPE_DIR)/include /I$(ZLIB_DIR) \
	/I$(JBIG2_DIR) /I$(JPEG_TURBO_DIR) /I$(OPENJPEG_DIR)
MUPDF_CFLAGS = $(MUPDF_CFLAGS) /wd4054 /wd4115 /wd4152 /wd4204 /wd4701 /wd4702 /wd4703 /wd4706

!if "$(CFG)"=="dbg"
MUPDF_CFLAGS = $(MUPDF_CFLAGS) /D "DEBUG"
!endif

# Make it easy to compile in a CJK fallback font and/or the Droid substitution fonts
!if "$(WITHCJKFONT)"==""
MUPDF_CFLAGS = $(MUPDF_CFLAGS) /D "NOCJKFONT"
!endif
!if "$(WITHDROIDFONT)"==""
MUPDF_CFLAGS = $(MUPDF_CFLAGS) /D "NODROIDFONT"
!endif

!if "$(PLATFORM)"=="X64"
# disable warning C4244: conversion from 'type1' to 'type2', possible loss of data
#     and warning C4267: conversion from 'size_t' to 'type', possible loss of data
FREETYPE_CFLAGS = $(FREETYPE_CFLAGS) /wd4244 /wd4267
JBIG2_CFLAGS = $(JBIG2_CFLAGS) /wd4267
OPENJPEG_CFLAGS = $(OPENJPEG_CFLAGS) /wd4267
JPEG_TURBO_CFLAGS = $(JPEG_TURBO_CFLAGS) /wd4267
MUPDF_CFLAGS  = $(MUPDF_CFLAGS) /wd4267
!endif

LIBS = $(LIBS) advapi32.lib kernel32.lib user32.lib gdi32.lib comdlg32.lib shell32.lib gdiplus.lib ole32.lib WindowsCodecs.lib

FT_OBJS = \
	$(OFT)\ftbase.obj $(OFT)\ftbbox.obj $(OFT)\ftbitmap.obj $(OFT)\ftgasp.obj \
	$(OFT)\ftglyph.obj $(OFT)\ftinit.obj $(OFT)\ftstroke.obj $(OFT)\ftsynth.obj \
	$(OFT)\ftsystem.obj $(OFT)\fttype1.obj $(OFT)\ftxf86.obj $(OFT)\cff.obj \
	$(OFT)\type1cid.obj $(OFT)\psaux.obj $(OFT)\psnames.obj $(OFT)\smooth.obj \
	$(OFT)\sfnt.obj $(OFT)\truetype.obj $(OFT)\type1.obj $(OFT)\raster.obj \
	$(OFT)\otvalid.obj $(OFT)\ftotval.obj $(OFT)\pshinter.obj
!if "$(CFG)"=="dbg"
FT_OBJS = $(FT_OBJS) $(OFT)\ftdebug.obj
!endif

ZLIB_OBJS = \
	$(OZ)\adler32.obj $(OZ)\compress.obj $(OZ)\crc32.obj $(OZ)\deflate.obj \
	$(OZ)\inffast.obj $(OZ)\inflate.obj $(OZ)\inftrees.obj $(OZ)\trees.obj \
	$(OZ)\zutil.obj \
	$(OZ)\gzlib.obj $(OZ)\gzread.obj $(OZ)\gzwrite.obj $(OZ)\gzclose.obj \
	$(OZ)\inftree9.obj

JPEG_TURBO_OBJS = \
	$(OT)\jcomapi.obj $(OT)\jdapimin.obj $(OT)\jdapistd.obj \
	$(OT)\jdatadst.obj $(OT)\jdatasrc.obj $(OT)\jdcoefct.obj $(OT)\jdcolor.obj $(OT)\jddctmgr.obj \
	$(OT)\jdhuff.obj $(OT)\jdinput.obj $(OT)\jdmainct.obj $(OT)\jdmarker.obj $(OT)\jdmaster.obj \
	$(OT)\jdmerge.obj $(OT)\jdpostct.obj $(OT)\jdsample.obj $(OT)\jdtrans.obj $(OT)\jerror.obj \
	$(OT)\jfdctflt.obj $(OT)\jfdctint.obj $(OT)\jidctflt.obj $(OT)\jidctfst.obj $(OT)\jidctint.obj \
	$(OT)\jquant1.obj $(OT)\jquant2.obj $(OT)\jutils.obj $(OT)\jmemmgr.obj $(OT)\jmemnobs.obj \
	$(OT)\jaricom.obj $(OT)\jdarith.obj $(OT)\jfdctfst.obj $(OT)\jdphuff.obj $(OT)\jidctred.obj

!if "$(PLATFORM)"=="X64"
JPEG_TURBO_OBJS = $(JPEG_TURBO_OBJS) \
	$(OT)\jfsseflt-64.obj $(OT)\jccolss2-64.obj $(OT)\jdcolss2-64.obj $(OT)\jcgrass2-64.obj \
	$(OT)\jcsamss2-64.obj $(OT)\jdsamss2-64.obj $(OT)\jdmerss2-64.obj $(OT)\jcqnts2i-64.obj  \
	$(OT)\jfss2fst-64.obj $(OT)\jfss2int-64.obj $(OT)\jiss2red-64.obj $(OT)\jiss2int-64.obj \
	$(OT)\jiss2fst-64.obj $(OT)\jcqnts2f-64.obj $(OT)\jiss2flt-64.obj $(OT)\jsimd_x86_64.obj
!else
JPEG_TURBO_OBJS = $(JPEG_TURBO_OBJS) \
	$(OT)\jsimdcpu.obj $(OT)\jccolmmx.obj $(OT)\jcgrammx.obj $(OT)\jdcolmmx.obj \
	$(OT)\jcsammmx.obj $(OT)\jdsammmx.obj $(OT)\jdmermmx.obj $(OT)\jcqntmmx.obj \
	$(OT)\jfmmxfst.obj $(OT)\jfmmxint.obj $(OT)\jimmxred.obj $(OT)\jimmxint.obj \
	$(OT)\jimmxfst.obj $(OT)\jcqnt3dn.obj $(OT)\jf3dnflt.obj $(OT)\ji3dnflt.obj \
	$(OT)\jcqntsse.obj $(OT)\jfsseflt.obj $(OT)\jisseflt.obj $(OT)\jccolss2.obj \
	$(OT)\jcgrass2.obj $(OT)\jdcolss2.obj $(OT)\jcsamss2.obj $(OT)\jdsamss2.obj \
	$(OT)\jdmerss2.obj $(OT)\jcqnts2i.obj $(OT)\jfss2fst.obj $(OT)\jfss2int.obj \
	$(OT)\jiss2red.obj $(OT)\jiss2int.obj $(OT)\jiss2fst.obj $(OT)\jcqnts2f.obj \
	$(OT)\jiss2flt.obj $(OT)\jsimd_i386.obj
!endif

JBIG2_OBJS = \
	$(OJB)\jbig2.obj $(OJB)\jbig2_arith.obj $(OJB)\jbig2_arith_int.obj \
	$(OJB)\jbig2_arith_iaid.obj $(OJB)\jbig2_huffman.obj $(OJB)\jbig2_segment.obj \
	$(OJB)\jbig2_page.obj $(OJB)\jbig2_symbol_dict.obj $(OJB)\jbig2_text.obj \
	$(OJB)\jbig2_generic.obj $(OJB)\jbig2_refinement.obj $(OJB)\jbig2_mmr.obj \
	$(OJB)\jbig2_image.obj $(OJB)\jbig2_metadata.obj $(OJB)\jbig2_halftone.obj

OPENJPEG_OBJS = \
	$(OOJ)\bio.obj $(OOJ)\cio.obj $(OOJ)\dwt.obj $(OOJ)\event.obj $(OOJ)\function_list.obj \
	$(OOJ)\image.obj $(OOJ)\invert.obj $(OOJ)\j2k.obj $(OOJ)\jp2.obj $(OOJ)\mct.obj \
	$(OOJ)\mqc.obj $(OOJ)\openjpeg.obj $(OOJ)\pi.obj $(OOJ)\raw.obj $(OOJ)\t1.obj \
	$(OOJ)\t2.obj $(OOJ)\tcd.obj $(OOJ)\tgt.obj $(OOJ)\cidx_manager.obj $(OOJ)\phix_manager.obj \
	$(OOJ)\ppix_manager.obj $(OOJ)\thix_manager.obj $(OOJ)\tpix_manager.obj $(OOJ)\opj_clock.obj

DRAW_OBJS = \
	$(OFZ)\draw-affine.obj $(OFZ)\draw-blend.obj $(OFZ)\draw-device.obj $(OFZ)\draw-edge.obj \
	$(OFZ)\draw-glyph.obj $(OFZ)\draw-mesh.obj $(OFZ)\draw-paint.obj $(OFZ)\draw-path.obj \
	$(OFZ)\draw-scale-simple.obj $(OFZ)\draw-unpack.obj

FITZ_OBJS = \
	$(OFZ)\bbox-device.obj $(OFZ)\bitmap.obj $(OFZ)\buffer.obj $(OFZ)\colorspace.obj \
	$(OFZ)\compressed-buffer.obj $(OFZ)\context.obj $(OFZ)\crypt-aes.obj $(OFZ)\crypt-arc4.obj \
	$(OFZ)\crypt-md5.obj $(OFZ)\crypt-sha2.obj $(OFZ)\device.obj $(OFZ)\error.obj \
	$(OFZ)\filter-basic.obj $(OFZ)\filter-dct.obj $(OFZ)\filter-fax.obj $(OFZ)\filter-flate.obj \
	$(OFZ)\filter-jbig2.obj $(OFZ)\filter-lzw.obj $(OFZ)\filter-predict.obj $(OFZ)\font.obj \
	$(OFZ)\function.obj $(OFZ)\geometry.obj $(OFZ)\getopt.obj $(OFZ)\halftone.obj \
	$(OFZ)\hash.obj $(OFZ)\image.obj $(OFZ)\link.obj $(OFZ)\list-device.obj \
	$(OFZ)\load-jpeg.obj $(OFZ)\load-jpx.obj $(OFZ)\load-jxr.obj $(OFZ)\load-png.obj \
	$(OFZ)\load-tiff.obj $(OFZ)\memory.obj $(OFZ)\outline.obj \
	$(OFZ)\output.obj $(OFZ)\path.obj $(OFZ)\pixmap.obj \
	$(OFZ)\shade.obj $(OFZ)\stext-device.obj $(OFZ)\stext-output.obj $(OFZ)\stext-paragraph.obj \
	$(OFZ)\stext-search.obj $(OFZ)\store.obj $(OFZ)\stream-open.obj $(OFZ)\stream-read.obj \
	$(OFZ)\string.obj $(OFZ)\text.obj $(OFZ)\time.obj \
	$(OFZ)\trace-device.obj $(OFZ)\transition.obj $(OFZ)\ucdn.obj $(OFZ)\xml.obj \
	$(OFZ)\glyph.obj $(OFZ)\gdiplus-device.obj

MUPDF_OBJS = \
	$(OP)\pdf-annot.obj $(OP)\pdf-cmap-load.obj $(OP)\pdf-cmap-parse.obj $(OP)\pdf-cmap-table.obj \
	$(OP)\pdf-cmap.obj $(OP)\pdf-colorspace.obj $(OP)\pdf-crypt.obj $(OP)\pdf-device.obj \
	$(OP)\pdf-encoding.obj $(OP)\pdf-event.obj $(OP)\pdf-field.obj $(OP)\pdf-font.obj \
	$(OP)\pdf-fontfile.obj $(OP)\pdf-form.obj $(OP)\pdf-ft-tools.obj $(OP)\pdf-function.obj \
	$(OP)\pdf-image.obj $(OP)\pdf-interpret.obj $(OP)\pdf-lex.obj $(OP)\pdf-metrics.obj \
	$(OP)\pdf-nametree.obj $(OP)\pdf-object.obj $(OP)\pdf-outline.obj $(OP)\pdf-page.obj \
	$(OP)\pdf-parse.obj $(OP)\pdf-pattern.obj $(OP)\pdf-pkcs7.obj $(OP)\pdf-repair.obj \
	$(OP)\pdf-shade.obj $(OP)\pdf-store.obj $(OP)\pdf-stream.obj $(OP)\pdf-type3.obj \
	$(OP)\pdf-unicode.obj $(OP)\pdf-write.obj $(OP)\pdf-xobject.obj $(OP)\pdf-xref-aux.obj \
	$(OP)\pdf-xref.obj $(OP)\pdf-js-none.obj $(OP)\pdf-appearance.obj

MUXPS_OBJS = \
	$(OX)\xps-common.obj $(OX)\xps-doc.obj $(OX)\xps-glyphs.obj $(OX)\xps-gradient.obj \
	$(OX)\xps-image.obj $(OX)\xps-outline.obj $(OX)\xps-path.obj $(OX)\xps-resource.obj \
	$(OX)\xps-tile.obj $(OX)\xps-util.obj $(OX)\xps-zip.obj

LIBS_OBJS = \
	$(ZLIB_OBJS) $(FT_OBJS) $(JPEG_TURBO_OBJS) $(JBIG2_OBJS) $(OPENJPEG_OBJS) \
	$(FITZ_OBJS) $(DRAW_OBJS) $(MUPDF_OBJS) $(MUXPS_OBJS)

MUDOC_OBJS = \
	$(OFZ)\document.obj $(OX)\mucbz.obj $(OX)\muimage.obj \
	$(OFZ)\svg-device.obj $(OFZ)\output-pcl.obj $(OFZ)\output-pwg.obj \
	$(OFZ)\stream-prog.obj

MUTOOLS_OBJS = \
	$(OA)\mudraw.obj $(OA)\mutool.obj $(OA)\pdfclean.obj $(OA)\pdfextract.obj \
	$(OA)\pdfinfo.obj $(OA)\pdfposter.obj $(OA)\pdfshow.obj

MUTOOL_OBJS = $(LIBS_OBJS) $(MUDOC_OBJS) $(OA)\mutool.obj $(OA)\pdfshow.obj \
	$(OA)\pdfclean.obj $(OA)\pdfinfo.obj $(OA)\pdfextract.obj $(OA)\pdfposter.obj
MUTOOL_APP = $(O)\mutool.exe

MUDRAW_OBJS = $(LIBS_OBJS) $(MUDOC_OBJS) $(OA)\mudraw.obj
MUDRAW_APP = $(O)\mudraw.exe

all: $(O) $(MUDRAW_APP) $(MUTOOL_APP)

clean: force
	-rmdir /S /Q $(O) $(MUPDF_GEN_DIR)

cleanall: force
	-rmdir /S /Q obj-dbg-win obj-rel-win $(MUPDF_GEN_DIR)

$(O): force
	@if not exist $(O) mkdir $(O)
	@if not exist $(OZ) mkdir $(OZ)
	@if not exist $(OFT) mkdir $(OFT)
	@if not exist $(OT) mkdir $(OT)
	@if not exist $(OOJ) mkdir $(OOJ)
	@if not exist $(OJB) mkdir $(OJB)
	@if not exist $(OFZ) mkdir $(OFZ)
	@if not exist $(OP) mkdir $(OP)
	@if not exist $(OX) mkdir $(OX)
	@if not exist $(OA) mkdir $(OA)

$(MUTOOL_APP): $(MUTOOL_OBJS)
	$(LD) $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@ /SUBSYSTEM:CONSOLE

$(MUDRAW_APP): $(MUDRAW_OBJS)
	$(LD) $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@ /SUBSYSTEM:CONSOLE

# freetype directories
{$(FREETYPE_DIR)\src\base}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\cff}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\cid}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\otvalid}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\psaux}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\pshinter}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\psnames}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\raster}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\sfnt}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\smooth}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\truetype}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(FREETYPE_DIR)\src\type1}.c{$(OFT)}.obj::
	$(CC) $(FREETYPE_CFLAGS) /Fo$(OFT)\ /Fd$(O)\vc80.pdb $<

{$(ZLIB_DIR)}.c{$(OZ)}.obj::
	$(CC) $(ZLIB_CFLAGS) /Fo$(OZ)\ /Fd$(O)\vc80.pdb $<

{$(ZLIB_DIR)\infback9}.c{$(OZ)}.obj::
	$(CC) $(ZLIB_CFLAGS) /Fo$(OZ)\ /Fd$(O)\vc80.pdb $<

{$(JPEG_TURBO_DIR)}.c{$(OT)}.obj::
	$(CC) $(JPEG_TURBO_CFLAGS) /Fo$(OT)\ /Fd$(O)\vc80.pdb $<

{$(JPEG_TURBO_DIR)\simd}.c{$(OT)}.obj::
	$(CC) $(JPEG_TURBO_CFLAGS) /Fo$(OT)\ /Fd$(O)\vc80.pdb $<

{$(JPEG_TURBO_DIR)\simd}.asm{$(OT)}.obj:
	$(NASM) $(JPEG_TURBO_NASM_FLAGS) -o $@ $<

{$(OPENJPEG_DIR)}.c{$(OOJ)}.obj::
	$(CC) $(OPENJPEG_CFLAGS) /Fo$(OOJ)\ /Fd$(O)\vc80.pdb $<

{$(JBIG2_DIR)}.c{$(OJB)}.obj::
	$(CC) $(JBIG2_CFLAGS) /Fo$(OJB)\ /Fd$(O)\vc80.pdb $<

{$(MUPDF_DIR)\source\fitz}.c{$(OFZ)}.obj::
	$(CC) $(MUPDF_CFLAGS) /Fo$(OFZ)\ /Fd$(O)\vc80.pdb $<

{$(MUPDF_DIR)\source\fitz}.cpp{$(OFZ)}.obj::
	$(CC) $(MUPDF_CFLAGS: /TC = ) /Fo$(OFZ)\ /Fd$(O)\vc80.pdb $<

{$(MUPDF_DIR)\source\pdf}.c{$(OP)}.obj::
	$(CC) $(MUPDF_CFLAGS) /Fo$(OP)\ /Fd$(O)\vc80.pdb $<

{$(MUPDF_DIR)\source\pdf\js}.c{$(OP)}.obj::
	$(CC) $(MUPDF_CFLAGS) /Fo$(OP)\ /Fd$(O)\vc80.pdb $<

{$(MUPDF_DIR)\source\xps}.c{$(OX)}.obj::
	$(CC) $(MUPDF_CFLAGS) /Fo$(OX)\ /Fd$(O)\vc80.pdb $<

{$(MUPDF_DIR)\source\tools}.c{$(OA)}.obj::
	$(CC) $(MUPDF_CFLAGS) /Fo$(OA)\ /Fd$(O)\vc80.pdb $<

{$(MUPDF_DIR)\source\cbz}.c{$(OX)}.obj::
	$(CC) $(MUPDF_CFLAGS) /Fo$(OX)\ /Fd$(O)\vc80.pdb $<

{$(MUPDF_DIR)\source\img}.c{$(OX)}.obj::
	$(CC) $(MUPDF_CFLAGS) /Fo$(OX)\ /Fd$(O)\vc80.pdb $<

# files that might have to be generated first:

MUPDF_CMAP_TABLES = $(MUPDF_GEN_DIR)\gen_cmap_cns.h $(MUPDF_GEN_DIR)\gen_cmap_gb.h \
	$(MUPDF_GEN_DIR)\gen_cmap_japan.h $(MUPDF_GEN_DIR)\gen_cmap_korea.h

MUPDF_FONT_FILES = $(MUPDF_GEN_DIR)\gen_font_base14.h $(MUPDF_GEN_DIR)\gen_font_droid.h \
	$(MUPDF_GEN_DIR)\gen_font_cjk.h $(MUPDF_GEN_DIR)\gen_font_cjk_full.h

MUPDF_GENERATED =  $(MUPDF_CMAP_TABLES) $(MUPDF_FONT_FILES) $(MUPDF_GEN_DIR)\js_util.h

$(MUPDF_GENERATED):
	cd $(MUPDF_DIR) && platform\win32\generate.bat

$(OP)\pdf-cmap-table.obj: $(MUPDF_CMAP_TABLES)
$(OP)\pdf-fontfile.obj: $(MUPDF_FONT_FILES)

# header dependencies

INC_DIR = $(MUPDF_DIR)\include\mupdf

FITZ_H  = $(INC_DIR)\fitz.h \
	$(INC_DIR)\fitz\annotation.h $(INC_DIR)\fitz\bitmap.h $(INC_DIR)\fitz\buffer.h \
	$(INC_DIR)\fitz\colorspace.h $(INC_DIR)\fitz\compressed-buffer.h $(INC_DIR)\fitz\context.h \
	$(INC_DIR)\fitz\crypt.h $(INC_DIR)\fitz\device.h $(INC_DIR)\fitz\display-list.h \
	$(INC_DIR)\fitz\document.h $(INC_DIR)\fitz\filter.h $(INC_DIR)\fitz\font.h \
	$(INC_DIR)\fitz\function.h $(INC_DIR)\fitz\getopt.h $(INC_DIR)\fitz\glyph-cache.h \
	$(INC_DIR)\fitz\hash.h $(INC_DIR)\fitz\image.h $(INC_DIR)\fitz\link.h \
	$(INC_DIR)\fitz\math.h $(INC_DIR)\fitz\meta.h $(INC_DIR)\fitz\outline.h \
	$(INC_DIR)\fitz\output-pcl.h $(INC_DIR)\fitz\output-png.h $(INC_DIR)\fitz\output-pnm.h \
	$(INC_DIR)\fitz\output-pwg.h $(INC_DIR)\fitz\output-svg.h $(INC_DIR)\fitz\output-tga.h \
	$(INC_DIR)\fitz\output.h $(INC_DIR)\fitz\path.h $(INC_DIR)\fitz\pixmap.h \
	$(INC_DIR)\fitz\shade.h $(INC_DIR)\fitz\store.h $(INC_DIR)\fitz\stream.h \
	$(INC_DIR)\fitz\string.h $(INC_DIR)\fitz\structured-text.h $(INC_DIR)\fitz\system.h \
	$(INC_DIR)\fitz\text.h $(INC_DIR)\fitz\transition.h $(INC_DIR)\fitz\write-document.h \
	$(INC_DIR)\fitz\xml.h $(INC_DIR)\fitz\glyph.h $(INC_DIR)\fitz\version.h

MUPDF_H = $(INC_DIR)\pdf.h \
	$(INC_DIR)\pdf\annot.h $(INC_DIR)\pdf\cmap.h $(INC_DIR)\pdf\crypt.h \
	$(INC_DIR)\pdf\document.h $(INC_DIR)\pdf\event.h $(INC_DIR)\pdf\field.h \
	$(INC_DIR)\pdf\font.h $(INC_DIR)\pdf\javascript.h $(INC_DIR)\pdf\object.h \
	$(INC_DIR)\pdf\output-pdf.h $(INC_DIR)\pdf\page.h $(INC_DIR)\pdf\parse.h \
	$(INC_DIR)\pdf\resource.h $(INC_DIR)\pdf\widget.h $(INC_DIR)\pdf\xref.h

MUXPS_H = $(INC_DIR)\xps.h
MUOTH_H = $(INC_DIR)\cbz.h $(INC_DIR)\img.h

$(FITZ_OBJS): $(FITZ_H)
$(MUPDF_OBJS): $(FITZ_H) $(MUPDF_H)
$(MUXPS_OBJS): $(FITZ_H) $(MUXPS_H)
$(MUTOOLS_OBJS): $(FITZ_H) $(MUPDF_H) $(MUXPS_H) $(MUOTH_H)
$(DRAW_OBJS) $(OFZ)\gdiplus-device.obj: $(MUPDF_DIR)\source\fitz\draw-imp.h
$(OP)\pdf-encoding.obj: $(MUPDF_DIR)\source\pdf\pdf-encodings.h $(MUPDF_DIR)\source\pdf\pdf-glyphlist.h

force: ;
